package common

import (
	"encoding/base64"
	"testing"

	. "github.com/onsi/gomega"
)

func TestGetCustomFencingRoles(t *testing.T) {

	tests := []struct {
		name                   string
		customBinaryDataBase64 map[string][]byte
		want                   []string
	}{
		{
			name:                   "empty ip list",
			customBinaryDataBase64: nil,
			want:                   []string{},
		},
		{
			name: "default roles",
			customBinaryDataBase64: map[string][]byte{
				"tripleo-tarball-config.tar.gz": []byte(
					"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"),
			},
			want: []string{"Controller", "ControllerSriov", "CtlNovaStdalone"},
		},
		{
			name: "controller role with custom name",
			customBinaryDataBase64: map[string][]byte{
				"tripleo-tarball-config.tar.gz": []byte(
					"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"),
			},
			want: []string{"P101-Ctl"},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			g := NewWithT(t)

			customBinaryData := map[string][]byte{}
			for key, dataBase64 := range tt.customBinaryDataBase64 {
				data, err := base64.StdEncoding.DecodeString(string(dataBase64))
				g.Expect(err).To(BeNil())
				customBinaryData[key] = data
			}

			roles, err := GetCustomFencingRoles(customBinaryData)
			g.Expect(err).To(BeNil())
			g.Expect(roles).NotTo(BeNil())
			g.Expect(roles).To(HaveLen(len(tt.want)))
			g.Expect(roles).To(BeEquivalentTo(tt.want))
		})
	}
}
