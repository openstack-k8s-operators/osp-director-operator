{{- /* golang template - https://pkg.go.dev/text/template */ -}}
# Resource Registry
resource_registry:
  OS::TripleO::Server: deployed-server/deployed-server.yaml
  OS::TripleO::Network: network/deployed_networks.yaml
  OS::TripleO::DeployedServer::ControlPlanePort: deployed-server/deployed-neutron-port.yaml
  OS::TripleO::Network::Ports::ControlPlaneVipPort: network/ports/deployed_vip_ctlplane.yaml
  OS::TripleO::Network::Ports::ExternalVipPort: network/ports/deployed_vip_external.yaml
  OS::TripleO::Network::Ports::InternalApiVipPort: network/ports/deployed_vip_internal_api.yaml
  OS::TripleO::Network::Ports::StorageMgmtVipPort: network/ports/deployed_vip_storage_mgmt.yaml
  OS::TripleO::Network::Ports::StorageVipPort: network/ports/deployed_vip_storage.yaml
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
{{- range $netid, $net := $role.Networks }}
{{- if not $net.IsControlPlane }}
  OS::TripleO::{{ $role.Name }}::Ports::{{ $net.Name }}Port: network/ports/deployed_{{ $net.NameLower }}.yaml
{{- end}}
{{- end }}
{{- end }}
{{- end }}

# Parameter Defaults
parameter_defaults:
  StackAction: CREATE
  DeployIdentifier: DeployIdentifier
  SoftwareConfigTransport: POLL_SERVER_HEAT
  RootStackName: overcloud
  ManageNetworks: False
  NeutronPublicInterface: nic3
{{- /* HostnameFormat and RoleCount */ -}}
{{- range $roleid, $role := .RolesMap }}
{{- if not $role.IsControlPlane }}
  {{ $role.Name }}HostnameFormat: "{{ $role.NameLower }}-%index%"
  {{- $roleCount := len $role.Nodes }}
  {{ $role.Name }}Count: {{ $roleCount }}
{{- end }}
{{- end }}
  #
  # VM NIC templates
{{- range $roleid, $role := .RolesMap }}
{{- if and $role.IsVMType $role.IsTripleoRole }}
  {{ $role.Name }}NetworkConfigTemplate: '/home/cloud-admin/playbooks/tarball/multiple_nics_dvr.j2'
{{- end }}
{{- end }}
  #
  # HostnameMap
  HostnameMap:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if and (not $node.VIP) }}
    {{ $role.NameLower }}-{{ $node.Index }}: {{ $node.Hostname }}
{{- end }}
{{- end }}
{{- end }}
  #
  # DeployedServerPortMap
  DeployedServerPortMap:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and (not $node.VIP) (eq $netname "ctlplane") }}
    {{ $node.Hostname }}-{{ $netname }}:
      fixed_ips:
        - ip_address: {{ $ip.IPaddr }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # NodePortMap
  NodePortMap:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if not $node.VIP }}
    {{ $node.Hostname }}:
{{- range $netname, $ip := $node.IPaddr }}
      {{ $ip.Network.NameLower }}:
        ip_address: {{ $ip.IPaddr }}
        ip_address_uri: '{{ $ip.IPAddrURI }}'
        ip_subnet: {{ $ip.IPAddrSubnet }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  # VipPortMap and ControlPlaneVipData usually gets created by `openstack overcloud network vip provision`
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if $node.VIP }}
  #
  # VipPortMap
  VipPortMap:
{{- range $netname, $ip := $node.IPaddr }}
{{- if not $ip.Network.IsControlPlane }}
    {{ $netname }}:
      ip_address: {{ $ip.IPaddr }}
      ip_address_uri: '{{ $ip.IPAddrURI }}'
      ip_subnet: {{ $ip.IPAddrSubnet }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # ControlPlaneVipData
  ControlPlaneVipData:
{{- range $roleid, $role := .RolesMap }}
{{- if $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and ($node.VIP) ($ip.Network.IsControlPlane) }}
    fixed_ips:
    - ip_address: {{ $ip.IPaddr }}
    name: control_virtual_ip
    network:
      tags:
      - {{ $ip.Network.Cidr }}
    subnets:
    - ip_version: 4
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # OVNStaticBridgeMacMappings
  OVNStaticBridgeMacMappings:
{{- range $roleid, $role := .RolesMap }}
{{- range $nodeid, $node := $role.Nodes }}
{{- if not $node.VIP }}
    {{ $node.Hostname }}:
{{- range $netname, $mac := $node.OVNStaticBridgeMappings }}
      {{ $netname }}: {{ $mac }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
  #
  # DeployedNetworkEnvironment
  DeployedNetworkEnvironment:
    {{- /* net_attributes_map start */}}
    net_attributes_map:
      {{- $net_idx := 0 }}
      {{- range $netname, $net := .NetworksMap }}
      {{- $netname_lower := lower $net.Name }}
      {{- if not $net.IsControlPlane }}
      {{ $net.NameLower }}:
        network:
          dns_domain: {{ $net.DomainName }}.
          mtu: {{ $net.MTU }}
          name: {{ $net.NameLower }}
          tags:
          - tripleo_network_name={{$net.Name }}
          - tripleo_net_idx={{ $net_idx }}
          {{- $net_idx = add $net_idx 1 }}
          - tripleo_vip={{ $net.VIP }}
        {{- /* subnets start */}}
        subnets:
        {{- range $subnetname, $subnet := $net.Subnets }}
          {{ $subnetname }}_subnet:
          {{- /* IPv4 subnet start */ -}}
          {{- if ne $subnet.IPv4.Cidr "" }}
            cidr: '{{ $subnet.IPv4.Cidr }}'
            dns_nameservers: []
            gateway_ip: {{ $subnet.IPv4.Gateway }}
            host_routes: {{ if eq (len $subnet.IPv4.Routes) 0 }}[]{{ else }}
              {{- range $netname, $route := $subnet.IPv4.Routes }}
              - destination: '{{ $route.Destination }}'
                nexthop: '{{ $route.Nexthop }}'
              {{- end }}
              {{- end }}
            ip_version: 4
            name: {{ $subnetname }}
            tags: {{ if eq $subnet.Vlan 0 }}[]{{ else }}
              - tripleo_vlan_id={{ $subnet.Vlan }}
            {{- end }}
          {{- end }}
          {{- /* IPv4 subnet end */}}
          {{- /* IPv6 subnet start */ -}}
          {{- if ne $subnet.IPv6.Cidr "" }}
            cidr: '{{ $subnet.IPv6.Cidr }}'
            dns_nameservers: []
            gateway_ip: {{ $subnet.IPv6.Gateway }}
            host_routes: {{ if eq (len $subnet.IPv6.Routes) 0 }}[]{{ else }}
              {{- range $netname, $route := $subnet.IPv6.Routes }}
              - destination: '{{ $route.Destination }}'
                nexthop: '{{ $route.Nexthop }}'
              {{- end }}
              {{- end }}
            ip_version: 6
            name: {{ $subnetname }}
            tags: {{ if eq $subnet.Vlan 0 }}[]{{ else }}
              - tripleo_vlan_id={{ $subnet.Vlan }}
            {{- end }}
          {{- end }}
          {{- /* IPv6 subnet end */ -}}
        {{- end }}
        {{- /* subnets end */ -}}
      {{- end }}
      {{- end }}
    {{- /* net_attributes_map end */ -}}
    {{- /* net_cidr_map start */}}
    net_cidr_map:
      {{- range $netname, $net := .NetworksMap }}
      {{- if not $net.IsControlPlane }}
      {{ $net.NameLower }}:
      {{- range $subnetname, $subnet := $net.Subnets }}
      {{- if $net.IPv6 }}
      - '{{ $subnet.IPv6.Cidr }}'
      {{-  else }}
      - '{{ $subnet.IPv4.Cidr }}'
      {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
    {{- /* net_cidr_map end */ -}}
    {{- /* net_ip_version_map start */}}
    net_ip_version_map:
      {{- range $netname, $net := .NetworksMap }}
      {{- if not $net.IsControlPlane }}
      {{ $net.NameLower }}: {{ if $net.IPv6 }}6{{ else }}4{{ end }}
      {{- end }}
      {{- end }}
    {{- /* net_ip_version_map end */}}
  #
  # CtlplaneNetworkAttributes
  CtlplaneNetworkAttributes:
    {{- range $netname, $net := .NetworksMap }}
    {{- $netname_lower := lower $net.Name }}
    {{- if $net.IsControlPlane }}
    network:
      dns_domain: {{ $net.DomainName }}.
      mtu: {{ $net.MTU }}
      name: {{ $net.NameLower }}
      tags:
      {{- range $subnetname, $subnet := $net.Subnets }}
      - {{ $subnet.IPv4.Cidr }}
      {{- end }}
    {{- /* subnets start */}}
    subnets:
    {{- range $subnetname, $subnet := $net.Subnets }}
      {{ $subnetname }}-subnet:
        cidr: {{ $subnet.IPv4.Cidr }}
        dns_nameservers: {{ if eq (len $net.DNSServers) 0 }}[]{{ else }}
          {{- range $idx, $dnsServer := $net.DNSServers }}
          - {{ $dnsServer }}
          {{- end }}
          {{- end }}
        gateway_ip: {{ $subnet.IPv4.Gateway }}
        host_routes: {{ if eq (len $subnet.IPv4.Routes) 0 }}[]{{ else }}
          {{- range $netname, $route := $subnet.IPv4.Routes }}
          - destination: '{{ $route.Destination }}'
            nexthop: '{{ $route.Nexthop }}'
          {{- end }}
          {{- end }}
        ip_version: 4
        name: {{ $subnetname }}-subnet
    {{- end }}
    {{- end }}
    {{- end }}
{{/*
# Set VIP's for redis and OVN
{{- range $roleid, $role := .RolesMap }}
{{- if $role.IsControlPlane }}
{{- range $nodeid, $node := $role.Nodes }}
{{- range $netname, $ip := $node.IPaddr }}
{{- if and ($node.VIP) (eq $netname "internal_api") }}
  RedisVirtualFixedIPs:
    - ip_address: {{ $ip.IPaddr }}
      use_neutron: false
  OVNDBsVirtualFixedIPs:
    - ip_address: {{ $ip.IPaddr }}
      use_neutron: false
{{- end }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}
*/}}